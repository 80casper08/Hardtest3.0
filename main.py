import asyncio
import os
import random
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from flask import Flask
from threading import Thread
from dotenv import load_dotenv
from questions import op_questions, general_questions, lean_questions, qr_questions
from hard_questions import questions as hard_questions

app = Flask(__name__)

@app.route("/")
def home():
    return "Bot is running!"

@app.route("/ping")
def ping():
    return "OK", 200

Thread(target=lambda: app.run(host="0.0.0.0", port=8080)).start()

load_dotenv()
TOKEN = os.getenv("TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

ADMIN_ID = 710633503

class QuizState(StatesGroup):
    category = State()
    question_index = State()
    selected_options = State()
    temp_selected = State()

class HardTestState(StatesGroup):
    question_index = State()
    selected_options = State()
    temp_selected = State()
    current_message_id = State()
    current_options = State()

sections = {
    "üëÆÔ∏è–û–üüëÆÔ∏è": op_questions,
    "üé≠–ó–∞–≥–∞–ª—å–Ω—ñüé≠": general_questions,
    "üóøLEANüóø": lean_questions,
    "üé≤QRüé≤": qr_questions
}

def main_keyboard():
    buttons = [types.KeyboardButton(text=section) for section in sections]
    buttons.append(types.KeyboardButton(text="üí™ Hard Test"))
    return types.ReplyKeyboardMarkup(keyboard=[[b] for b in buttons], resize_keyboard=True)

@dp.message(F.text == "/start")
async def cmd_start(message: types.Message):
    await message.answer("–í–∏–±–µ—Ä–∏ —Ä–æ–∑–¥—ñ–ª –¥–ª—è —Ç–µ—Å—Ç—É:", reply_markup=main_keyboard())

@dp.message(F.text.in_(sections.keys()))
async def start_quiz(message: types.Message, state: FSMContext):
    full_name = message.from_user.full_name
    username = message.from_user.username or "–Ω–µ–º–∞—î"
    with open("logs.txt", "a", encoding="utf-8") as f:
        f.write(f"{full_name} | @{username} | –ü–æ—á–∞–≤ —Ç–µ—Å—Ç {message.text}\n")
    try:
        await bot.send_message(ADMIN_ID, f"üë§ {full_name} (@{username}) –ø–æ—á–∞–≤ —Ç–µ—Å—Ç {message.text}")
    except:
        pass
    category = message.text
    questions = sections[category][:20]
    await state.set_state(QuizState.category)
    await state.update_data(category=category, question_index=0, selected_options=[], wrong_answers=[], questions=questions)
    await send_question(message, state)

async def send_question(message_or_callback, state: FSMContext):
    data = await state.get_data()
    questions = data["questions"]
    index = data["question_index"]

    if index >= len(questions):
        correct = 0
        wrongs = []
        for i, q in enumerate(questions):
            correct_answers = {j for j, (_, is_correct) in enumerate(q["options"]) if is_correct}
            user_selected = set(data["selected_options"][i])
            if correct_answers == user_selected:
                correct += 1
            else:
                wrongs.append({
                    "question": q["text"],
                    "options": q["options"],
                    "selected": list(user_selected),
                    "correct": list(correct_answers)
                })

        await state.update_data(wrong_answers=wrongs)
        percent = round(correct / len(questions) * 100)
        grade = "‚ùå –ü–æ–≥–∞–Ω–æ"
        if percent >= 90:
            grade = "üíØ –í—ñ–¥–º—ñ–Ω–Ω–æ"
        elif percent >= 70:
            grade = "üëç –î–æ–±—Ä–µ"
        elif percent >= 50:
            grade = "üëå –ó–∞–¥–æ–≤—ñ–ª—å–Ω–æ"

        full_name = message_or_callback.from_user.full_name
        username = message_or_callback.from_user.username or "–Ω–µ–º–∞—î"
        try:
            await bot.send_message(ADMIN_ID, f"üì¨ {full_name} (@{username}) –∑–∞–≤–µ—Ä—à–∏–≤ {data['category']}\n‚úÖ {correct} –∑ {len(questions)} ({percent}%) ‚Äì {grade}")
        except:
            pass

        result = (
            "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É:*\n\n"
            f"‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:* {correct} –∑ {len(questions)}\n"
            f"üìà *–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å:* {percent}%\n"
            f"üèÜ *–û—Ü—ñ–Ω–∫–∞:* {grade}"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–π—Ç–∏ —â–µ —Ä–∞–∑", callback_data="restart")],
            [InlineKeyboardButton(text="üìã –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", callback_data="details")]
        ])

        if isinstance(message_or_callback, CallbackQuery):
            await message_or_callback.message.answer(result, reply_markup=keyboard, parse_mode="Markdown")
        else:
            await message_or_callback.answer(result, reply_markup=keyboard, parse_mode="Markdown")
        return

    question = questions[index]
    text = question["text"]
    options = list(enumerate(question["options"]))
    random.shuffle(options)

    selected = data.get("temp_selected", set())
    buttons = []
    for i, (label, _) in options:
        prefix = "‚úÖ " if i in selected else "‚óªÔ∏è "
        buttons.append([InlineKeyboardButton(text=prefix + label, callback_data=f"opt_{i}")])
    buttons.append([InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    if isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.message.edit_text(text, reply_markup=keyboard)
    else:
        await message_or_callback.answer(text, reply_markup=keyboard)

@dp.callback_query(F.data == "opt_0")
async def confirm_answer(callback: CallbackQuery, state: FSMContext):
    pass  # –î–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ

# TODO: –î–æ–¥–∞—Ç–∏ —Ä–µ—à—Ç—É –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ (opt_, confirm, restart, details, Hard Test...)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


