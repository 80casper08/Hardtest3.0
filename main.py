import asyncio
import random
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –°—Ç–∞–Ω–∏ FSM
class TestState(StatesGroup):
    choosing_section = State()
    in_quiz = State()

# –†–æ–∑–¥—ñ–ª–∏ —ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
sections = {
    "–û–ø": [{"question": "–ü–∏—Ç–∞–Ω–Ω—è 1 –û–ø?", "options": ["A", "B", "C"], "answer": "B"}],
    "–•–∞—Ä–¥–¢–µ—Å—Ç": [{"question": "–ü–∏—Ç–∞–Ω–Ω—è 1 –•–∞—Ä–¥?", "options": ["X", "Y", "Z"], "answer": "Z"}],
    "–ó–∞–≥–∞–ª—å–Ω—ñ": [{"question": "–©–æ —Ç–∞–∫–µ –û–ü?", "options": ["–û–ø–µ—Ä–∞", "–û—Ö–æ—Ä–æ–Ω–∞ –ø—Ä–∞—Ü—ñ", "–û–ø—Ü—ñ—è"], "answer": "–û—Ö–æ—Ä–æ–Ω–∞ –ø—Ä–∞—Ü—ñ"}],
    "–õ—ñ–Ω": [{"question": "Lean –æ–∑–Ω–∞—á–∞—î?", "options": ["–ñ–∏—Ä", "–¢–æ—â–∏–π", "–†–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π"], "answer": "–†–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π"}]
}

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
def main_menu():
    buttons = [
        [types.KeyboardButton(text="–û–ø")],
        [types.KeyboardButton(text="–•–∞—Ä–¥–¢–µ—Å—Ç")],
        [types.KeyboardButton(text="–ó–∞–≥–∞–ª—å–Ω—ñ")],
        [types.KeyboardButton(text="–õ—ñ–Ω")]
    ]
    return types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# –û–±—Ä–æ–±–∫–∞ /start
@dp.message(F.text == "/start")
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(TestState.choosing_section)
    await message.answer("–í–∏–±–µ—Ä–∏ —Ä–æ–∑–¥—ñ–ª –¥–ª—è —Ç–µ—Å—Ç—É:", reply_markup=main_menu())

# –í–∏–±—ñ—Ä —Ä–æ–∑–¥—ñ–ª—É
@dp.message(TestState.choosing_section, F.text.in_(sections.keys()))
async def section_chosen(message: types.Message, state: FSMContext):
    section = message.text
    await state.update_data(section=section, current=0, correct=0)
    await state.set_state(TestState.in_quiz)
    await send_question(message.chat.id, section, 0)

# –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è
@dp.callback_query(TestState.in_quiz)
async def answer_callback(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    section = data["section"]
    current = data["current"]
    correct = data["correct"]
    selected = callback.data

    question_data = sections[section][current]
    correct_answer = question_data["answer"]

    if selected == correct_answer:
        correct += 1

    current += 1

    if current < len(sections[section]):
        await state.update_data(current=current, correct=correct)
        await send_question(callback.message.chat.id, section, current)
    else:
        await callback.message.answer(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {correct} –∑ {len(sections[section])}")
        await callback.message.answer("–ü—Ä–æ–π—Ç–∏ —â–µ —Ä–∞–∑ —Ç–æ–π —Å–∞–º–∏–π —Ç–µ—Å—Ç?", reply_markup=again_keyboard())
        await state.set_state(TestState.choosing_section)

    await callback.answer()

# –ö–Ω–æ–ø–∫–∞ "–ø—Ä–æ–π—Ç–∏ —â–µ —Ä–∞–∑"
def again_keyboard():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —â–µ —Ä–∞–∑", callback_data="again")]
    ])
    return kb

@dp.callback_query(F.data == "again")
async def repeat_test(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    section = data.get("section")
    if not section:
        await callback.message.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–æ–∑–¥—ñ–ª.")
        return
    await state.update_data(current=0, correct=0)
    await state.set_state(TestState.in_quiz)
    await send_question(callback.message.chat.id, section, 0)
    await callback.answer()

# –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
async def send_question(chat_id, section, index):
    question_data = sections[section][index]
    text = f"{index + 1}) {question_data['question']}"
    buttons = [
        [InlineKeyboardButton(text=opt, callback_data=opt)]
        for opt in question_data["options"]
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await bot.send_message(chat_id, text, reply_markup=markup)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())    ]
    return types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# –û–±—Ä–æ–±–∫–∞ /start
@dp.message(F.text == "/start")
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(TestState.choosing_section)
    await message.answer("–í–∏–±–µ—Ä–∏ —Ä–æ–∑–¥—ñ–ª –¥–ª—è —Ç–µ—Å—Ç—É:", reply_markup=main_menu())

# –í–∏–±—ñ—Ä —Ä–æ–∑–¥—ñ–ª—É
@dp.message(TestState.choosing_section, F.text.in_(sections.keys()))
async def section_chosen(message: types.Message, state: FSMContext):
    section = message.text
    await state.update_data(section=section, current=0, correct=0)
    await state.set_state(TestState.in_quiz)
    await send_question(message.chat.id, section, 0, state)

# –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è
@dp.callback_query(TestState.in_quiz)
async def answer_callback(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    section = data["section"]
    current = data["current"]
    correct = data["correct"]
    selected = callback.data

    question_data = sections[section][current]
    correct_answer = question_data["answer"]

    if selected == correct_answer:
        correct += 1

    current += 1

    if current < len(sections[section]):
        await state.update_data(current=current, correct=correct)
        await send_question(callback.message.chat.id, section, current, state)
    else:
        await callback.message.answer(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {correct} –∑ {len(sections[section])}")
        await callback.message.answer("–ü—Ä–æ–π—Ç–∏ —â–µ —Ä–∞–∑ —Ç–æ–π —Å–∞–º–∏–π —Ç–µ—Å—Ç?", reply_markup=again_keyboard())
        await state.set_state(TestState.choosing_section)

    await callback.answer()

# –ö–Ω–æ–ø–∫–∞ "–ø—Ä–æ–π—Ç–∏ —â–µ —Ä–∞–∑"
def again_keyboard():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —â–µ —Ä–∞–∑", callback_data="again")]
    ])
    return kb

@dp.callback_query(F.data == "again")
async def repeat_test(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    section = data.get("section")
    if not section:
        await callback.message.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–æ–∑–¥—ñ–ª.")
        return
    await state.update_data(current=0, correct=0)
    await state.set_state(TestState.in_quiz)
    await send_question(callback.message.chat.id, section, 0, state)
    await callback.answer()

# –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
async def send_question(chat_id, section, index, state: FSMContext):
    question_data = sections[section][index]
    text = f"{index + 1}) {question_data['question']}"
    buttons = [
        [InlineKeyboardButton(text=opt, callback_data=opt)]
        for opt in question_data["options"]
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await bot.send_message(chat_id, text, reply_markup=markup)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())def main_keyboard():
    buttons = [types.KeyboardButton(text=section) for section in sections]
    buttons.append(types.KeyboardButton(text="üëÄHard TestüëÄ"))
    return types.ReplyKeyboardMarkup(keyboard=[[btn] for btn in buttons], resize_keyboard=True)

@dp.message(F.text == "/start")
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–∏–±–µ—Ä–∏ —Ä–æ–∑–¥—ñ–ª –¥–ª—è —Ç–µ—Å—Ç—É:", reply_markup=main_keyboard())

@dp.message(F.text.in_(sections.keys()))
async def start_quiz(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if data.get("active_test"):
        await message.answer(f"‚ùó –í–∏ –≤–∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç —É —Ä–æ–∑–¥—ñ–ª—ñ: {data['active_test']}. –ó–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ, –±—É–¥—å –ª–∞—Å–∫–∞.")
        return

    category = message.text
    questions = sections[category]

    await state.set_state(QuizState.category)
    await state.update_data(category=category, question_index=0, selected_options=[], questions=questions, active_test=category)

    await message.answer(f"üîí –ü–æ—á–∞—Ç–æ —Ä–æ–∑–¥—ñ–ª: {category}", reply_markup=types.ReplyKeyboardRemove())
    await send_question(message, state)

@dp.message(F.text == "üëÄHard TestüëÄ")
async def start_hard_test(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if data.get("active_test"):
        await message.answer(f"‚ùó –í–∏ –≤–∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç —É —Ä–æ–∑–¥—ñ–ª—ñ: {data['active_test']}. –ó–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ, –±—É–¥—å –ª–∞—Å–∫–∞.")
        return

    shuffled_questions = hard_questions.copy()
    random.shuffle(shuffled_questions)

    await state.set_state(HardTestState.question_index)
    await state.update_data(
        question_index=0,
        selected_options=[],
        questions=shuffled_questions,
        active_test="üëÄHard TestüëÄ"
    )

    await message.answer("üîí –ü–æ—á–∞—Ç–æ —Ä–æ–∑–¥—ñ–ª: Hard Test", reply_markup=types.ReplyKeyboardRemove())
    await send_hard_question(message, state)

async def send_question(message_or_callback, state: FSMContext):
    data = await state.get_data()
    questions = data.get("questions")
    index = data.get("question_index", 0)

    if index >= len(questions):
        await message_or_callback.answer("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", reply_markup=main_keyboard())
        await state.update_data(active_test=None)
        await state.clear()
        return

    q = questions[index]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for i, opt in enumerate(q["options"]):
        keyboard.add(types.InlineKeyboardButton(text=opt, callback_data=f"ans_{i}"))

    await message_or_callback.answer(q["question"], reply_markup=keyboard)

@dp.callback_query(lambda c: c.data and c.data.startswith("ans_"))
async def process_answer(callback: types.CallbackQuery, state: FSMContext):
    selected = int(callback.data.split("_")[1])
    data = await state.get_data()
    questions = data.get("questions")
    index = data.get("question_index", 0)

    q = questions[index]
    # –ú–æ–∂–Ω–∞ —Ç—É—Ç –∑–±–µ—Ä–µ–≥—Ç–∏ —á–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ

    index += 1
    await state.update_data(question_index=index)

    await callback.answer()  # –ü—Ä–∏–±–∏—Ä–∞—î "–≥–æ–¥–∏–Ω–∫—É" –≤ Telegram

    await send_question(callback.message, state)

async def send_hard_question(message_or_callback, state: FSMContext):
    data = await state.get_data()
    questions = data.get("questions")
    index = data.get("question_index", 0)

    if index >= len(questions):
        await message_or_callback.answer("Hard Test –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", reply_markup=main_keyboard())
        await state.update_data(active_test=None)
        await state.clear()
        return

    q = questions[index]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for i, opt in enumerate(q["options"]):
        keyboard.add(types.InlineKeyboardButton(text=opt, callback_data=f"hard_ans_{i}"))

    await message_or_callback.answer(q["question"], reply_markup=keyboard)

@dp.callback_query(lambda c: c.data and c.data.startswith("hard_ans_"))
async def process_hard_answer(callback: types.CallbackQuery, state: FSMContext):
    selected = int(callback.data.split("_")[2])
    data = await state.get_data()
    index = data.get("question_index", 0)
    index += 1
    await state.update_data(question_index=index)

    await callback.answer()

    await send_hard_question(callback.message, state)

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))async def start_quiz(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if data.get("active_test"):
        await message.answer(f"‚ùó –í–∏ –≤–∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç —É —Ä–æ–∑–¥—ñ–ª—ñ: {data['active_test']}. –ó–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ, –±—É–¥—å –ª–∞—Å–∫–∞.")
        return

    category = message.text
    questions = sections[category]

    await state.set_state(QuizState.category)
    await state.update_data(category=category, question_index=0, selected_options=[], questions=questions, active_test=category)

    await message.answer(f"üîí –ü–æ—á–∞—Ç–æ —Ä–æ–∑–¥—ñ–ª: {category}", reply_markup=types.ReplyKeyboardRemove())
    await send_question(message, state)

@dp.message(F.text == "üëÄHard TestüëÄ")
async def start_hard_test(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if data.get("active_test"):
        await message.answer(f"‚ùó –í–∏ –≤–∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç —É —Ä–æ–∑–¥—ñ–ª—ñ: {data['active_test']}. –ó–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ, –±—É–¥—å –ª–∞—Å–∫–∞.")
        return

    shuffled_questions = hard_questions.copy()
    random.shuffle(shuffled_questions)

    await state.set_state(HardTestState.question_index)
    await state.update_data(
        question_index=0,
        selected_options=[],
        questions=shuffled_questions,
        active_test="üëÄHard TestüëÄ"
    )

    await message.answer("üîí –ü–æ—á–∞—Ç–æ —Ä–æ–∑–¥—ñ–ª: Hard Test", reply_markup=types.ReplyKeyboardRemove())
    await send_hard_question(message, state)

async def send_question(message_or_callback, state: FSMContext):
    data = await state.get_data()
    questions = data.get("questions")
    index = data.get("question_index", 0)

    if index >= len(questions):
        await message_or_callback.answer("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", reply_markup=main_keyboard(message_or_callback.from_user.id))
        await state.update_data(active_test=None)
        await state.clear()
        return

    q = questions[index]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for i, opt in enumerate(q["options"]):
        keyboard.add(types.InlineKeyboardButton(text=opt, callback_data=f"ans_{i}"))

    await message_or_callback.answer(q["question"], reply_markup=keyboard)

@dp.callback_query(lambda c: c.data and c.data.startswith("ans_"))
async def process_answer(callback: types.CallbackQuery, state: FSMContext):
    selected = int(callback.data.split("_")[1])
    data = await state.get_data()
    questions = data.get("questions")
    index = data.get("question_index", 0)

    q = questions[index]
    correct = q["correct"]

    # –¢—É—Ç –º–æ–∂–Ω–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤–∏–±—ñ—Ä, —Ä–∞—Ö—É–≤–∞—Ç–∏ –±–∞–ª–∏ —ñ —Ç.–¥.
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ —ñ–¥–µ–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
    index += 1
    await state.update_data(question_index=index)

    await callback.answer()  # —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ "–≥–æ–¥–∏–Ω–∫—É" –≤ Telegram

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è
    await send_question(callback.message, state)

async def send_hard_question(message_or_callback, state: FSMContext):
    data = await state.get_data()
    questions = data.get("questions")
    index = data.get("question_index", 0)

    if index >= len(questions):
        await message_or_callback.answer("Hard Test –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", reply_markup=main_keyboard(message_or_callback.from_user.id))
        await state.update_data(active_test=None)
        await state.clear()
        return

    q = questions[index]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for i, opt in enumerate(q["options"]):
        keyboard.add(types.InlineKeyboardButton(text=opt, callback_data=f"hard_ans_{i}"))

    await message_or_callback.answer(q["question"], reply_markup=keyboard)

@dp.callback_query(lambda c: c.data and c.data.startswith("hard_ans_"))
async def process_hard_answer(callback: types.CallbackQuery, state: FSMContext):
    selected = int(callback.data.split("_")[2])
    data = await state.get_data()
    index = data.get("question_index", 0)
    index += 1
    await state.update_data(question_index=index)

    await callback.answer()

    await send_hard_question(callback.message, state)

def main_keyboard(user_id=None):
    buttons = [types.KeyboardButton(text=section) for section in sections]
    buttons.append(types.KeyboardButton(text="üëÄHard TestüëÄ"))
    return types.ReplyKeyboardMarkup(keyboard=[[btn] for btn in buttons], resize_keyboard=True)

@dp.message(F.text == "/start")
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–∏–±–µ—Ä–∏ —Ä–æ–∑–¥—ñ–ª –¥–ª—è —Ç–µ—Å—Ç—É:", reply_markup=main_keyboard(message.from_user.id))

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
def main_keyboard(user_id=None):
    buttons = [types.KeyboardButton(text=section) for section in sections]
    buttons.append(types.KeyboardButton(text="üëÄHard TestüëÄ"))
    if user_id in ADMIN_IDS:
        buttons.append(types.KeyboardButton(text="‚ÑπÔ∏è –Ü–Ω—Ñ–æ"))
    return types.ReplyKeyboardMarkup(keyboard=[[btn] for btn in buttons], resize_keyboard=True)

@dp.message(F.text == "/start")
async def cmd_start(message: types.Message, state: FSMContext):
    user = message.from_user
    user_id = user.id

    if is_blocked(user_id):
        await message.answer("üö´–ë–æ—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–ø—Ä–∞—Ü—é—îüîê")
        return

    await state.clear()
    await message.answer("–í–∏–±–µ—Ä–∏ —Ä–æ–∑–¥—ñ–ª –¥–ª—è —Ç–µ—Å—Ç—É:", reply_markup=main_keyboard(user_id))

@dp.message(F.text.in_(sections.keys()))
async def start_quiz(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if is_blocked(user_id):
        await message.answer("üö´–ë–æ—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–ø—Ä–∞—Ü—é—îüîê")
        return

    category = message.text
    questions = sections[category]

    from main import log_result, save_user_if_new
    log_result(message.from_user, category, started=True)

    await state.set_state(QuizState.category)
    await state.update_data(category=category, question_index=0, selected_options=[], wrong_answers=[], questions=questions)

    await message.answer(f"üîí –ü–æ—á–∞—Ç–æ —Ä–æ–∑–¥—ñ–ª: {category}", reply_markup=types.ReplyKeyboardRemove())
    await send_question(message, state)

@dp.message(F.text == "üëÄHard TestüëÄ")
async def start_hard_test(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if is_blocked(user_id):
        await message.answer("üö´–ë–æ—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–ø—Ä–∞—Ü—é—îüîê")
        return

    from main import log_result, save_user_if_new
    log_result(message.from_user, "üëÄHard TestüëÄ", started=True)

    await state.clear()
    await state.set_state(HardTestState.question_index)

    shuffled_questions = hard_questions.copy()
    random.shuffle(shuffled_questions)

    await state.update_data(
        category="üëÄHard TestüëÄ",
        question_index=0,
        selected_options=[],
        temp_selected=set(),
        questions=shuffled_questions
    )

    await message.answer("üîí –ü–æ—á–∞—Ç–æ —Ä–æ–∑–¥—ñ–ª: Hard Test", reply_markup=types.ReplyKeyboardRemove())
    await send_hard_question(message.chat.id, state)

# üîÅ –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–π—Ç–∏ —â–µ —Ä–∞–∑" ‚Äî –ó–í–ò–ß–ê–ô–ù–ò–ô –¢–ï–°–¢
@dp.callback_query(F.data == "restart")
async def restart_quiz(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    category = data.get("category")

    if not category or category not in sections:
        await state.clear()
        await callback.message.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –∑–∞–Ω–æ–≤–æ:", reply_markup=main_keyboard(callback.from_user.id))
        return

    questions = sections[category][:]
    await state.clear()
    await state.set_state(QuizState.category)
    await state.update_data(
        category=category,
        question_index=0,
        selected_options=[],
        wrong_answers=[],
        questions=questions
    )
    await callback.message.answer(f"üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ —Ä–æ–∑–¥—ñ–ª —â–µ —Ä–∞–∑: {category}", reply_markup=types.ReplyKeyboardRemove())
    await send_question(callback, state)

# üîÅ –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–π—Ç–∏ —â–µ —Ä–∞–∑" ‚Äî HARD TEST
@dp.callback_query(F.data == "hard_retry")
async def restart_hard_quiz(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(HardTestState.question_index)

    shuffled_questions = hard_questions.copy()
    random.shuffle(shuffled_questions)

    await state.update_data(
        category="üëÄHard TestüëÄ",
        question_index=0,
        selected_options=[],
        temp_selected=set(),
        questions=shuffled_questions
    )
    await callback.message.answer("üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ Hard Test —â–µ —Ä–∞–∑!", reply_markup=types.ReplyKeyboardRemove())
    await send_hard_question(callback.message.chat.id, state)

# ‚úÖ –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è (–∑–≤–∏—á–∞–π–Ω–∏–π —Ç–µ—Å—Ç)
# –í –∫—ñ–Ω–µ—Ü—å —Ñ—É–Ω–∫—Ü—ñ—ó send_question (–∫–æ–ª–∏ —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ):
# await message_or_callback.answer("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ", reply_markup=main_keyboard(user_id))

# ‚úÖ –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è (hard test)
# –í –∫—ñ–Ω–µ—Ü—å send_hard_question –ø—ñ—Å–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É:
# await bot.send_message(chat_id, "–í–∏–±–µ—Ä–∏ —Ä–æ–∑–¥—ñ–ª:", reply_markup=main_keyboard(user.id))
