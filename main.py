import asyncio
import os
import random

from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN") bot = Bot(token=TOKEN) dp = Dispatcher(storage=MemoryStorage())

–ö–ª–∞—Å –¥–ª—è FSM

class TestStates(StatesGroup): test_in_progress = State() waiting_for_answer = State()

–ü–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ

questions_data = { "üëÄHard TestüëÄ": [ {"question": "–©–æ —Ç–∞–∫–µ —Ä–∏–∑–∏–∫?", "answers": ["–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –Ω–∞—Å—Ç–∞–Ω–Ω—è –ø–æ–¥—ñ—ó", "–î–æ–∫—É–º–µ–Ω—Ç", "–ö–∞—Å–∫–∞"]}, {"question": "–©–æ —Ä–æ–±–∏—Ç–∏ –ø—Ä–∏ –ø–æ–∂–µ–∂—ñ?", "answers": ["–í–∏–∫–ª–∏–∫–∞—Ç–∏ 101", "–•–æ–≤–∞—Ç–∏—Å—è", "–ë—ñ–≥—Ç–∏ –¥–æ –º–∞—à–∏–Ω–∏"]}, ], "üé≠–ó–∞–≥–∞–ª—å–Ω—ñüé≠": [ {"question": "–Ø–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫–∏–ø—ñ–Ω–Ω—è –≤–æ–¥–∏?", "answers": ["100¬∞C", "90¬∞C", "80¬∞C"]}, {"question": "–°–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ —É —Ç–∏–∂–Ω—ñ?", "answers": ["7", "5", "10"]}, ], "üßç‚Äç‚ôÇÔ∏è–û–üüßç‚Äç‚ôÇÔ∏è": [ {"question": "–©–æ —Ç–∞–∫–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂?", "answers": ["–ù–∞–≤—á–∞–Ω–Ω—è –∑ –±–µ–∑–ø–µ–∫–∏", "–í—ñ–¥–ø—É—Å—Ç–∫–∞", "–û–±—ñ–¥"]}, ], "üóøLEANüóø": [ {"question": "–©–æ —Ç–∞–∫–µ –∫–∞–π–∑–µ–Ω?", "answers": ["–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è", "–ó–≤—ñ—Ç–Ω—ñ—Å—Ç—å", "–ö–æ–Ω—Ç—Ä–æ–ª—å"]}, ], "üé≤QRüé≤": [ {"question": "–©–æ —Ç–∞–∫–µ QR-–∫–æ–¥?", "answers": ["–®–≤–∏–¥–∫–∏–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø—É", "–§–æ—Ä–º—É–ª–∞", "–§–∞–π–ª"]}, ] }

–ó–º—ñ–Ω–Ω–∞ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É

active_tests = {}

–ö–∞—Å—Ç–æ–º–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞

menu_keyboard = ReplyKeyboardMarkup( keyboard=[ [KeyboardButton(text="üßç‚Äç‚ôÇÔ∏è–û–üüßç‚Äç‚ôÇÔ∏è")], [KeyboardButton(text="üé≠–ó–∞–≥–∞–ª—å–Ω—ñüé≠")], [KeyboardButton(text="üóøLEANüóø")], [KeyboardButton(text="üé≤QRüé≤")], [KeyboardButton(text="üëÄHard TestüëÄ")], ], resize_keyboard=True )

/start

@dp.message(F.text == "/start") async def start(message: Message, state: FSMContext): await state.clear() active_tests[message.from_user.id] = None await message.answer("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É:", reply_markup=menu_keyboard)

–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –±—É–¥—å-—è–∫–∏–π —Ä–æ–∑–¥—ñ–ª

@dp.message(F.text.in_(questions_data.keys())) async def handle_test_start(message: Message, state: FSMContext): user_id = message.from_user.id selected_test = message.text

if active_tests.get(user_id) and active_tests[user_id] != selected_test:
    await message.answer("–ó–∞–≤–µ—Ä—à—ñ—Ç—å –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–µ—Å—Ç –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É –Ω–æ–≤–æ–≥–æ.")
    return

active_tests[user_id] = selected_test
await state.set_state(TestStates.waiting_for_answer)
await state.update_data(test=selected_test, current_question=0, score=0)
await send_next_question(message, state)

–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è

async def send_next_question(message: Message, state: FSMContext): data = await state.get_data() questions = questions_data[data["test"]] current = data["current_question"]

if current >= len(questions):
    await message.answer(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {data['score']} –∑ {len(questions)}")
    await state.clear()
    active_tests[message.from_user.id] = None
    return

question_data = questions[current]
answers = question_data["answers"]
random.shuffle(answers)

keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=ans)] for ans in answers],
    resize_keyboard=True
)
await message.answer(question_data["question"], reply_markup=keyboard)

–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ

@dp.message(TestStates.waiting_for_answer) async def handle_answer(message: Message, state: FSMContext): data = await state.get_data() test = data["test"] current = data["current_question"] correct_answer = questions_data[test][current]["answers"][0]

score = data["score"]
if message.text == correct_answer:
    score += 1

await state.update_data(current_question=current+1, score=score)
await send_next_question(message, state)

–ó–∞–ø—É—Å–∫

async def main(): await dp.start_polling(bot)

if name == "main": asyncio.run(main())

