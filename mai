import asyncio
import os
import random
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TOKEN")
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏ –¥–ª—è Hard Test
class HardTestState(StatesGroup):
    waiting_for_answer = State()

# –ü–æ—Ç–æ—á–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∏–π —Ä–æ–∑–¥—ñ–ª
active_section = {}

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –º–µ–Ω—é
def main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–û–ø"),
                KeyboardButton(text="–•–∞—Ä–¥ –¢–µ—Å—Ç"),
            ],
            [
                KeyboardButton(text="–ó–∞–≥–∞–ª—å–Ω—ñ"),
                KeyboardButton(text="–õ—ñ–Ω"),
            ],
        ],
        resize_keyboard=True
    )

# –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä—É
def retry_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —â–µ —Ä–∞–∑")]],
        resize_keyboard=True
    )

# –ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Ç–∞–Ω—å –¥–ª—è "–•–∞—Ä–¥ –¢–µ—Å—Ç"
hard_test_questions = [
    {
        "question": "–©–æ —Ç–∞–∫–µ —Ä–∏–∑–∏–∫?",
        "options": ["–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –Ω–∞—Å—Ç–∞–Ω–Ω—è –Ω–µ–±–µ–∑–ø–µ–∫–∏", "–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∑ –æ—Ö–æ—Ä–æ–Ω–∏ –ø—Ä–∞—Ü—ñ", "–ú—ñ—Å—Ü–µ –¥–ª—è –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É"],
        "correct": [0]
    },
    {
        "question": "–©–æ —Ç–∞–∫–µ –ù–ü–ê–û–ü?",
        "options": ["–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç", "–ó–∞–∫–æ–Ω –£–∫—Ä–∞—ó–Ω–∏", "–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞"],
        "correct": [0]
    }
]

user_data = {}

@dp.message(F.text.in_(["–û–ø", "–ó–∞–≥–∞–ª—å–Ω—ñ", "–õ—ñ–Ω"]))
async def not_available_yet(message: types.Message):
    await message.answer("–¶–µ–π —Ä–æ–∑–¥—ñ–ª —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ. –û–±–µ—Ä—ñ—Ç—å '–•–∞—Ä–¥ –¢–µ—Å—Ç' üôÇ")

@dp.message(F.text == "–•–∞—Ä–¥ –¢–µ—Å—Ç")
async def start_hard_test(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if active_section.get(user_id):
        await message.answer("–í–∏ –≤–∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ä–æ–∑–¥—ñ–ª. –ó–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ, —â–æ–± –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π.")
        return

    active_section[user_id] = "–•–∞—Ä–¥ –¢–µ—Å—Ç"
    user_data[user_id] = {"score": 0, "question_index": 0}

    await state.set_state(HardTestState.waiting_for_answer)
    await send_question(message, user_id)

async def send_question(message: types.Message, user_id):
    index = user_data[user_id]["question_index"]
    if index >= len(hard_test_questions):
        score = user_data[user_id]["score"]
        await message.answer(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(hard_test_questions)}", reply_markup=retry_keyboard())
        active_section.pop(user_id, None)
        return

    q = hard_test_questions[index]
    options = "\n".join(f"{i+1}) {opt}" for i, opt in enumerate(q["options"]))
    await message.answer(f"{q['question']}\n{options}")

@dp.message(HardTestState.waiting_for_answer)
async def handle_answer(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    answer = message.text.strip()

    index = user_data[user_id]["question_index"]
    q = hard_test_questions[index]
    correct_indexes = q["correct"]

    if answer.isdigit() and int(answer)-1 in correct_indexes:
        user_data[user_id]["score"] += 1
        await message.answer("‚úÖ –í—ñ—Ä–Ω–æ!")
    else:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–æ.")

    user_data[user_id]["question_index"] += 1
    await send_question(message, user_id)

@dp.message(F.text == "–ü—Ä–æ–π—Ç–∏ —â–µ —Ä–∞–∑")
async def retry_section(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if active_section.get(user_id) != "–•–∞—Ä–¥ –¢–µ—Å—Ç":
        await message.answer("–ü–æ–∫–∏ —â–æ –º–æ–∂–Ω–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ª–∏—à–µ '–•–∞—Ä–¥ –¢–µ—Å—Ç'")
        return

    user_data[user_id] = {"score": 0, "question_index": 0}
    await state.set_state(HardTestState.waiting_for_answer)
    await send_question(message, user_id)

@dp.message()
async def start(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:", reply_markup=main_keyboard())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
